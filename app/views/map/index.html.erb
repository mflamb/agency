
<h2>Philly Grid</h2>

<div id="map" class="map">
  <script>


    var layers = {//this will be an object where we can call on each layer to be displayed by running a function that activates them
    }

    var neighborhoods_source = new ol.source.Vector({
        url: 'https://raw.githubusercontent.com/azavea/geo-data/master/Neighborhoods_Philadelphia/Neighborhoods_Philadelphia.geojson',
        format: new ol.format.GeoJSON()
    });


    var neighborhoods_layer = new ol.layer.Vector({
        source: neighborhoods_source


    var vectorSource = new ol.source.Vector({
      url: 'https://raw.githubusercontent.com/azavea/geo-data/master/Neighborhoods_Philadelphia/Neighborhoods_Philadelphia.geojson',
      format: new ol.format.GeoJSON()

    });


    var affordable_source = new ol.source.Vector({
        url: 'https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+affordablehousingproduction&filename=affordablehousingproduction&format=geojson&skipfields=cartodb_id',
        format: new ol.format.GeoJSON()
    });
    var affordable_layer = new ol.layer.Vector({
        source: affordable_source
    });

    var housing_counseling_source = new ol.source.Vector({
        url: 'http://data.phl.opendata.arcgis.com/datasets/3265538198254e9fb6a8974745adab51_0.geojson',
        format: new ol.format.GeoJSON()
    });
    var housing_counseling_layer = new ol.layer.Vector({
        source: housing_counseling_source
    });


    var map = new ol.Map({
        target: 'map',
        layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM()
            }),
            neighborhoods_layer, housing_counseling_layer,affordable_layer,


        ],
        view: new ol.View({
            center: ol.proj.fromLonLat([-75.166923, 39.955948]),
            zoom: 13
        })

    });


    var highlightStyleCache = {};
        var featureOverlay = new ol.layer.Vector({
          source: new ol.source.Vector(),
            map: map,
            style: function(feature, resolution){
              var text = resolution * 100000 < 10 ? feature.get('text') : '';
                 if (!highlightStyleCache[text]) {
                     highlightStyleCache[text] = new ol.style.Style({
                         stroke: new ol.style.Stroke({
                             color: '#000066',
                             width: 2
                         }),
                         fill: new ol.style.Fill({
                             color: 'rgba(192,192,192,0.7)'
                         }),
                         text: new ol.style.Text({
                             font: '12px Calibri,sans-serif',
                             text: text,
                             fill: new ol.style.Fill({
                                 color: '#000'
                             }),
                             stroke: new ol.style.Stroke({
                                 color: '#f00',
                                 width: 3
                             })
                         })
                     });
                 }
                 return highlightStyleCache[text];
             }
         });

         var highlight;
        var displayFeatureInfo = function (pixel) {

            var feature = map.forEachFeatureAtPixel(pixel, function (feature) {
                return feature;
            });

            var info = document.getElementById('map');
            if (feature) {
                map.innerHTML = feature.getId() + ': ' + feature.get('name');
            } else {
                info.innerHTML = '&nbsp;';
            }

            if (feature !== highlight) {
                if (highlight) {
                    featureOverlay.getSource().removeFeature(highlight);
                }
                if (feature) {
                    featureOverlay.getSource().addFeature(feature);
                }
                highlight = feature;
            }

        };

        map.on('pointermove', function(evt) {
        if (evt.dragging) {
          return;
        }
        var pixel = map.getEventPixel(evt.originalEvent);
        displayFeatureInfo(pixel);
      });

      // geojson parsing objects for each layer here:
        var neighborhood_geojson = <%= @nei_response.html_safe %>;
        console.log(neighborhood_geojson);


        var counseling_geojson = <%= @counsel_response.html_safe %>;
        console.log(counseling_geojson);


        </script>
    <div id="test" class="test"></div>
</body>
