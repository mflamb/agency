<!doctype html>
<html lang="en">

<head>
    <!-- OpenLayers is a mapping service that doesn't require
    OAuth Authentication or app registration and is compatible
    with Mapstraction -->
    <link rel="stylesheet" href="https://openlayers.org/en/v4.6.5/css/ol.css" type="text/css">
    <!-- leaflet CDN for using the library and importing GeoJSON -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"></script>
    <!-- leaflet also recommends using these for extra security purposes -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==" crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==" crossorigin=""></script>
    <!--  -->
    <style>
    /*literally just resizes the map div*/

    .map {
        height: 50vw;
        width: 80%;
    }
    </style>
    <!-- Javascript -->
    <script src="https://openlayers.org/en/v4.6.5/build/ol.js" type="text/javascript"></script>
    <title>OpenLayers example</title>
</head>

<body>
    <h2>Philly Map</h2>
    </div>
    <div id="map" class="map"></div>
    <div id="test" class="test"></div>
    <form class="form-inline">
        <select id="type" class="form-control">
            <option value="click" selected>Inspect a neighborhood</option>
        </select>
        <!-- <span id="status">&nbsp;0 selected features</span> -->
    </form>
    <div id="Neighborhood_Info"></div>
    <div id="counsel_info"></div>
    <div id="afford_info"></div>
        <script type="text/javascript">
        

        var neighborhoods_source = new ol.source.Vector({
            url: 'https://raw.githubusercontent.com/azavea/geo-data/master/Neighborhoods_Philadelphia/Neighborhoods_Philadelphia.geojson',
            format: new ol.format.GeoJSON()
        });

        var neighborhoods_layer = new ol.layer.Vector({
            source: neighborhoods_source
        });


        var affordable_source = new ol.source.Vector({
            url: 'https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+affordablehousingproduction&filename=affordablehousingproduction&format=geojson&skipfields=cartodb_id',
            format: new ol.format.GeoJSON()
        });
        var affordable_layer = new ol.layer.Vector({
            source: affordable_source
        });

        var housing_counseling_source = new ol.source.Vector({
            url: 'http://data.phl.opendata.arcgis.com/datasets/3265538198254e9fb6a8974745adab51_0.geojson',
            format: new ol.format.GeoJSON()
        });
        var housing_counseling_layer = new ol.layer.Vector({
            source: housing_counseling_source
        });


        // parks layer
        var parks_source = new ol.source.Vector({
            url: 'http://data.phl.opendata.arcgis.com/datasets/4df9250e3d624ea090718e56a9018694_0.geojson',
            format: new ol.format.GeoJSON()
        });
        var parks_layer = new ol.layer.Vector({
            source: parks_source
        })

        var map = new ol.Map({
            target: 'map',
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM()
                }),
                neighborhoods_layer, housing_counseling_layer, affordable_layer, parks_layer


            ],
            view: new ol.View({
                center: ol.proj.fromLonLat([-75.166923, 39.955948]),
                zoom: 13
            })

        });

        // intersecting layers
        var layersinmap = [neighborhoods_layer, housing_counseling_layer, affordable_layer];


        // intersecting function
        // var find_extent = forEachFeatureInExtent(extent, callback, opt_this)

        var select = null;
        var selectClick = new ol.interaction.Select({
            condition: ol.events.condition.click
        });
        console.log("selectClick:", selectClick)
        var selectAltClick = new ol.interaction.Select({
            condition: function(mapBrowserEvent) {
                return ol.events.condition.click(mapBrowserEvent) && ol.events.condition.altKeyOnly(mapBrowserEvent);
            }
        });
        console.log('selectAltClick', selectAltClick)
        var selectElement = document.getElementById('type');
        console.log('selectElement', selectElement)
        // append to div function should be activated in here
        var changeInteraction = function() {
            if (select !== null) {
                map.removeInteraction(select);
            }
            var value = selectElement.value;
            if (value == 'click') {
                select = selectClick;
            } else {
                select = null;
            }
            if (select !== null) {
                map.addInteraction(select);
                map.on('click', function(event) {

                    layersinmap.forEach(function(layer) {

                        layer.once('precompose', function(event) {
                            var selectedFeatures = selectClick.getFeatures();
                            console.log("selectedfeatures", selectedFeatures)
                            var housingaddress1 = selectedFeatures.a[0].N.NAME
                            var housingaddress2 = selectedFeatures.a[0].N.ADDRESS
                            var housingaddress3 = selectedFeatures.a[0].N.CITY
                            console.log("housingselected:", housingaddress1) //so you know it works
                            var neighborhoodselected = selectedFeatures.a[0].N.mapname;
                            
                            console.log(neighborhoodselected);


                            var affordname= selectedFeatures.a[0].N.name;
                            var affordaddress = selectedFeatures.a[0].N.address;
                            var affordunits = selectedFeatures.a[0].N.total_unit;

                            if (neighborhoodselected !== undefined) {
                                document.getElementById('Neighborhood_Info').innerHTML = neighborhoodselected;
                                console.log("neighborhoodselected:",neighborhoodselected);
                                document.getElementById('counsel_info').innerHTML = '';
                                document.getElementById('afford_info').innerHTML = '';
                            }
                            else if (housingaddress1 !== undefined) {
                                document.getElementById('counsel_info').innerHTML = `${housingaddress1} ${housingaddress2} ${housingaddress3}`;
                                document.getElementById('Neighborhood_Info').innerHTML = '';
                                document.getElementById('afford_info').innerHTML='';

                            }
                            else if (affordname !== undefined){
                                document.getElementById('afford_info').innerHTML = `Organization ${affordname} ${affordaddress} ${affordunits};`
                                document.getElementById('Neighborhood_Info').innerHTML = ''; 
                                document.getElementById('counsel_info').innerHTML = ''; 

                            }

                        });
                    })
                });

                // function readFeature(features) {
                //      
                //     var myfeature = features;
                //     console.log("muh features", myfeature)
                //     consoleText.innerHTML += myfeature[2][0];
                // }

                // select.on('select', function(e) {
                //     document.getElementById('status').innerHTML = "&nbsp;" + e.target.getFeatures().getLength() + ' selected features (last operation selected ' + e.selected.length + 'and deselected ' + e.deselected.length + ' features)'

                // });
            }
        };

        selectElement.onchange = changeInteraction;
        changeInteraction();

        /////////// 

        // intersecting layers
        //get extent of neighborhood
        // select_neighborhood = new ol.interaction.Select({

        //     condition: ol.events.condition.mouseclicked
        // });
        // var neighborhood_features = select_neighborhood.getFeatures();
        // console.log(neighborhood_features);
        // var neighborhood_feature = neighborhood_features.item(0);
        // console.log("1 neighborhood feature?", neighborhood_feature)
        // var id = neighborhood_feature.get('id');
        // console.log("id", id)
        // neighborhoods_layer
        // n_extent = new ol.geom.Polygon(hood)
        // map.getView().calculateExtent()

        // set extent to neighborhood extent on click
        //check for features that intersect extent
        //set interaction on features (highlight)
        // append feature info to div

        // geojson parsing objects for each layer here:
        var neighborhood_geojson = <%= @nei_response.html_safe %>;
        console.log(neighborhood_geojson);

        var counseling_geojson = <%= @counsel_response.html_safe %>;
        console.log(counseling_geojson);
        </script>
</body>

</html>